/******************************************************************************
 * GENERATED BY StructCompiler, DON'T MODIFY MANULLY.
 * Generated Time: ${createTime}
 */
#ifndef __${fileName}_H__
\#define __${fileName}_H__

\#include <stdint.h>
#set ($cTypeMap = {
    "byte"  : "uint8_t",
    "int8"  : "int8_t",
    "uint8" : "uint8_t",
    "short" : "int16_t",
    "int16" : "int16_t",
    "uint16": "uint16_t",
    "int"   : "int32_t",
    "int32" : "int32_t",
    "uint32": "uint32_t",
    "int64" : "int64_t",
    "uint64": "uint64_t",
    "float" : "float",
    "double": "double"
})
##
#macro (cType $field)
#if ($field.type.isBasic())
${cTypeMap[$field.type.name]}##
#elseif ($field.type.isString())
char##
#else
struct ${utils.getCStyleIdentifier($field.type.typeName)}##
#end
#end
##
##
#macro (array $field)
#if ($field.type.hasArray())
#if ($field.type.isFixedLength())
[${field.type.arraySize}]##
#else
[0]##
#end
#else
##
#end
#end

\#define ALIGNED_BY_BYTE __attribute__((packed,aligned(1)))

struct Struct {
    char member[0];
} ALIGNED_BY_BYTE;

#foreach ($struct in $allStructs)
/*
 * ${utils.getCStyleIdentifier($struct.name)}
#if ($struct.haveComments())
 *
#foreach ($line in $struct.comments)
 * ${line}
#end
#end
 */
typedef struct ${utils.getCStyleIdentifier($struct.name)} {
#foreach ($field in $struct.fields)
#if ($field.haveComments())
#foreach ($line in $field.comments)
    // $line
#end
#end
    #cType($field) ${utils.getCStyleIdentifier($field.name)}#array($field);

#end
} ALIGNED_BY_BYTE ${utils.getCStyleIdentifier($struct.name)}_t;

#end
#endif /* end of __${fileName}_H__ */
/*
 * ${struct.className}.java
 *
 * GENERATED BY StructCompiler, DON'T MODIFY MANULLY.
 * Generated Time: ${createTime}
 */
package ${package};

#if ($struct.decodable)
import java.io.DataInputStream;
#end
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

#set ($defaultValueMap = {
    "char"      : "'\0'",
	"byte"		: "(byte) 0",
	"boolean"	: "false",
	"short"		: "(short) 0",
	"int"		: "0",
	"long"		: "0L",
	"float"		: "0",
	"double"	: "0.00"
})
#set ($typeSizeMap = {
    "char"      : "1",
	"byte"		: "1",
	"boolean"	: "1",
	"int8"      : "1",
	"uint8"     : "1",
	"short"		: "2",
	"int16"     : "2",
	"uint16"    : "2",
	"int"		: "4",
	"int32"     : "4",
	"uint32"    : "4",
	"long"		: "8",
	"float"		: "4",
	"double"	: "8"
})
##
## 宏: 生成field的类型
#macro (declareType $field)
#if ($field.type.isBasic())
#if ($field.type.hasArray() && !$field.type.isString())
${field.type.typeName}[]##
#else
${field.type.typeName}##
#end
#elseif ($field.type.isString())
${field.type.typeName}##
#else
#if ($field.type.hasArray())
#if ($field.type.isFixedLength())
${field.type.typeName}[]##
#else
java.util.List<${field.type.typeName}>##
#end
#else
${field.type.typeName}##
#end
#end
#end
##
## 宏: 生成属性定义
#macro (declareField $field)
#if ($field.haveComments())
#foreach ($line in $field.comments)
    // $line
#end
#end
    private #declareType($field) ${field.name}; // 原型: ${field.type.prototype}
#end
##
## 宏: 生成field的缺省值
#macro (defaultValue $field)
#if ($field.defaultValue)
($field.type.typeName) ${field.defaultValue.value}##
#elseif ($field.type.isString())
null##
#else
${defaultValueMap[${field.type.typeName}]}##
#end
#end
## 宏: 为field赋初值
#macro (initField $field)
#if ($field.type.isBasic())
#if ($field.type.hasArray())
#if ($field.type.fixedLength)
        this.${field.name} = new ${field.type.typeName}[${field.type.arraySize}];
        java.util.Arrays.fill(this.${field.name}, ${defaultValueMap[${field.type.typeName}]});
#else
        this.${field.name} = null;
#end
#else
        this.$field.name = #defaultValue($field);
#end
#elseif ($field.type.isString())
        this.$field.name = #defaultValue($field);
#else
#if ($field.type.hasArray())
#if ($field.type.isFixedLength())
        this.${field.name} = new ${field.type.typeName}[${field.type.arraySize}];
        for (int i = 0; i < ${field.type.arraySize}; ++i) {
            this.${field.name}[i] = new ${field.type.typeName}();
        }
#else
        this.${field.name} = new java.util.LinkedList<${field.type.typeName}>();
#end
#else
        this.${field.name} = new ${field.type.typeName}();
#end
#end
#end
##
## 宏: field的读方法
#macro (readMethod $field)
read${utils.upperFirstChar(${field.type.name})}##
#end
##
## 宏: field的写方法
#macro (writeMethod $field)
write${utils.upperFirstChar(${field.type.name})}##
#end
##
/**
 * struct ${structName}
#if ($struct.haveComments())
 *
#foreach ($line in $struct.comments)
 * ${line}
#end
#end
 */
public class ${struct.className} extends Struct {
#foreach ($field in $struct.fields)
#declareField($field)

#end
    public ${struct.className}() {
#foreach ($field in $struct.fields)
#initField($field)

#end
    }

#foreach ($field in $struct.fields)
    public #declareType($field) ${utils.getGetter($field.name)}() {
        return this.${field.name};
    }

#if ($field.type.settable)
    public void ${utils.getSetter($field.name)}(#declareType($field) $field.name) {
        this.${field.name} = ${field.name};
    }

#end
#end
    @Override
    public int calcSize() {
        int __size = 0;

#foreach ($field in $struct.fields)
#if ($field.type.isBasic())
#if ($field.type.fixedLength)
        __size += ${typeSizeMap[${field.type.name}]} * ${field.type.arraySize};
#else
        if (${field.name} != null) {
            __size += ${typeSizeMap[${field.type.name}]} * ${field.name}.length;
        }
#end
#elseif ($field.type.isString())
        __size += ${field.type.arraySize};
#else
#if ($field.type.hasArray())
#if ($field.type.array.fixed)
        for (int i = 0; i < ${field.type.arraySize}; ++i) {
            __size += this.${field.name}[i].calcSize();
        }
#else
#if ($field.type.array.identifier)
        this.${field.type.arraySize} = (#declareType($struct.getField($field.type.arraySize))) this.${field.name}.size();
#end
        for (Struct __struct : this.${field.name}) {
            __size += __struct.calcSize();
        }
#end
#else
        if (this.${field.name} != null) {
            __size += this.${field.name}.calcSize();
        }
#end
#end

#end
        return __size;
    }

    @Override
    public void encode(OutputStream output) throws IOException {
        DataOutputStream __dos = getDataOutput(output);

#foreach ($field in $struct.fields)
#if ($field.type.isBasic())
#if ($field.type.hasArray())
#if ($field.type.array.fixed)
        for (int i = 0; i < ${field.type.arraySize}; ++i) {
            #writeMethod($field)(this.${field.name}[i], __dos);
        }
#else
        if (${field.name} != null) {
            for (int i = 0; i < ${field.name}.length; ++i) {
                #writeMethod($field)(this.${field.name}[i], __dos);
            }
        }
#end
#else
#if ($field.reference)
#if ($field.reference.type.basic)
        this.${field.name} = (#declareType($field)) (this.${field.reference.name} == null ? 0 : this.${field.reference.name}.length);
#else
        this.${field.name} = (#declareType($field)) (this.${field.reference.name} == null ? 0 : this.${field.reference.name}.size());
#end
#end
        #writeMethod($field)(this.${field.name}, __dos);
#end
#elseif ($field.type.isString())
        writeString(this.${field.name}, ${field.type.arraySize}, __dos);
#else
#if ($field.type.hasArray())
#if ($field.type.array.fixed)
        for (int i = 0; i < ${field.type.arraySize}; ++i) {
            this.${field.name}[i].encode(__dos);
        }
#else
        for (Struct __struct : this.${field.name}) {
            __struct.encode(__dos);
        }
#end
#else
        if (this.${field.name} != null) {
            this.${field.name}.encode(__dos);
        }
#end
#end

#end
    }

    @Override
    public Struct decode(InputStream input) throws IOException {
#if ($struct.decodable)
        DataInputStream __dis = getDataInput(input);

#foreach ($field in $struct.fields)
#if ($field.type.isBasic())
#if ($field.type.hasArray())
#if ($field.type.array.identifier)
        if (${field.type.arraySize} > 0) {
            this.${field.name} = new ${field.type.typeName}[${field.type.arraySize}];
        }
#end
        for (int i = 0; i < ${field.type.arraySize}; ++i) {
            this.${field.name}[i] = #readMethod($field)(__dis);
        }
#else
        this.${field.name} = #readMethod($field)(__dis);
#end
#elseif ($field.type.isString())
        this.${field.name} = readString(__dis, ${field.type.arraySize});
#else
#if ($field.type.hasArray())
#if ($field.type.isFixedLength())
        for (int i = 0; i < ${field.type.arraySize}; ++i) {
            this.${field.name}[i].decode(__dis);
        }
#else
        for (int i = 0; i < this.${field.type.arraySize}; ++i) {
            this.${field.name}.add(($field.type.typeName) new ${field.type.typeName}().decode(__dis));
        }
#end
#else
        this.${field.name}.decode(__dis);
#end
#end

#end
        return this;
#else
        throw new UnsupportedOperationException(
                        "cannot decode array whose elements number is unknown.");
#end
    }

    @Override
    protected void format(TextStructFormat structFormat, int level) {
        structFormat.beginStruct("${struct.className}", level);

#foreach ($field in $struct.fields)
#if ($field.type.isBasic())
#if ($field.type.hasArray())
        structFormat.writeArray("${field.name}", level + 1, this.${field.name}, "${field.type.name}");
#else
        structFormat.write("${field.name}", level + 1, this.${field.name}, "${field.type.name}");
#end
#elseif ($field.type.isString())
        structFormat.writeString("${field.name}", level + 1, this.${field.name}, ${field.type.arraySize});
#else
#if ($field.type.hasArray())
#if ($field.type.array.fixed)
        structFormat.writeStructArray("${field.name}", level + 1, this.${field.name});
#else
        structFormat.writeList("${field.name}", level + 1, this.${field.name});
#end
#else
        structFormat.writeStruct("${field.name}", this.${field.name}, level + 1);
#end
#end

#end
        structFormat.endStruct("${struct.className}", level);
    }
}
/*
 * ${struct.className}.java
 *
 * GENERATED BY StructCompiler, DON'T MODIFY MANULLY.
 * Generated Time: ${createTime}
 */
package ${package};

import java.io.*;

#set ($defaultValueMap = {
    "char"      : "'\0'",
	"byte"		: "(byte) 0",
	"boolean"	: "false",
	"short"		: "(short) 0",
	"int"		: "0",
	"long"		: "0L",
	"float"		: "0",
	"double"	: "0.00"
})
#set ($typeSizeMap = {
    "char"      : "1",
	"byte"		: "1",
	"boolean"	: "1",
	"short"		: "2",
	"int"		: "4",
	"long"		: "8",
	"float"		: "4",
	"double"	: "8"
})
##
## 宏: 生成field的类型
#macro (bitsType $field)
int##
#end
##
## 宏: 生成属性定义
#macro (declareBits $field)
#if ($field.haveComments())
#foreach ($line in $field.comments)
    // $line
#end
#end
    private #bitsType($field) ${field.name}; // ${field.type.arraySize} Bits
#end
##
## 宏: 生成field的缺省值
#macro (defaultValueOfBits $field)
#if ($field.defaultValue)
${field.defaultValue.value}##
#else
0##
#end
#end
## 宏: 为field赋初值
#macro (initBits $field)
        ${utils.getSetter($field.name)}(#defaultValueOfBits($field));
#end
##
/**
 * struct ${structName}
#if ($struct.haveComments())
 *
#foreach ($line in $struct.comments)
 * ${line}
#end
#end
 */
public class ${struct.className} extends Struct {
#foreach ($field in $struct.fields)
#declareBits($field)

#end
    public ${struct.className}() {
#foreach ($field in $struct.fields)
#initBits($field)
#end
    }

#foreach ($field in $struct.fields)
    public #bitsType($field) ${utils.getGetter($field.name)}() {
        return this.${field.name};
    }

    public void ${utils.getSetter($field.name)}(#bitsType($field) $field.name) {
        if (${field.name} < 0) {
            throw new RuntimeException("value of bitfield \"${field.name}\" cannot be negative.");
        } else if (${field.name} >= Math.pow(2, ${field.type.arraySize})) {
            throw new RuntimeException("value of bitfield \"${field.name}\" overflow.");
        } else {
            this.${field.name} = ${field.name};
        }
    }

#end
    @Override
    public int calcSize() {
        int __bits = 0;
#foreach ($field in $struct.fields)
        __bits += ${field.type.arraySize};
#end
        int __remainder = __bits % 8;
        if (__remainder > 0) {
            __bits += 8 - __remainder;
        }
        return __bits / 8;
    }

    @Override
    public void encode(OutputStream output) throws IOException {
        BitOutputStream bos = new BitOutputStream(output);
#foreach ($field in $struct.fields)
        writeBits(this.${field.name}, ${field.type.arraySize}, bos);
#end
        bos.end();
    }

    @Override
    public Struct decode(InputStream input) throws IOException {
        BitInputStream bis = new BitInputStream(input);
#foreach ($field in $struct.fields)
        this.${field.name} = readBits(bis, ${field.type.arraySize});
#end
        return this;
    }
}
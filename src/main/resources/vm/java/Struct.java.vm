/******************************************************************************
 * Struct.java
 * GENERATED BY StructCompiler, DON'T MODIFY MANULLY.
 * Generated Time: ${createTime}
 */
package ${package};

import java.io.*;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.List;

public class Struct implements Externalizable {
    public final static int LITTLE_ENDIAN = 0;
    public final static int BIG_ENDIAN = 1;
    public static int byteOrder = LITTLE_ENDIAN;

    private final static int TRUE = 1;
    private final static int FALSE = 0;

    @Override
    public void writeExternal(ObjectOutput out) throws IOException {
        if (out instanceof OutputStream) {
            encode((OutputStream) out);
        } else {
            throw new IllegalArgumentException("out must implements OutputStream");
        }
    }

    @Override
    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
        if (in instanceof InputStream) {
            decode((InputStream) in);
        } else {
            throw new IllegalArgumentException("in must implements OutputStream");
        }
    }

    public void encode(OutputStream output) throws IOException {
    }

    public Struct decode(InputStream input) throws IOException {
        return this;
    }

    public int calcSize() {
        return 0;
    }

    public String readString(DataInput dis, int len) throws IOException {
        byte[] bytes = new byte[len];
        dis.readFully(bytes);
        return getString(bytes);
    }

    public void writeString(String value, int len, DataOutput dos) throws IOException {
        int strlen = isEmpty(value) ? 0 : value.length();
        int wlen = strlen < len ? strlen : len;
        int diff = len - wlen;

        if (wlen > 0) {
            byte[] bytes = value.getBytes();
            dos.write(bytes, 0, wlen);
        }

        if (diff > 0) {
            byte[] buf = new byte[64];
            Arrays.fill(buf, (byte) 0);
            int cnt = diff / buf.length;
            int mod = diff % buf.length;
            for (int i = 0; i < cnt; ++i) {
                dos.write(buf);
            }
            if (mod > 0) {
                dos.write(buf, 0, mod);
            }
        }
    }

    protected DataInputStream getDataInput(InputStream input) {
        if (input instanceof DataInputStream) {
            return (DataInputStream) input;
        } else {
            return new DataInputStream(input);
        }
    }

    protected DataOutputStream getDataOutput(OutputStream output) {
        if (output instanceof DataOutputStream) {
            return (DataOutputStream) output;
        } else {
            return new DataOutputStream(output);
        }
    }

    public byte readByte(DataInput dis) throws IOException {
        return dis.readByte();
    }

    public void writeByte(byte value, DataOutput dos) throws IOException {
        dos.writeByte(value);
    }

    public byte readInt8(DataInput dis) throws IOException {
        return readByte(dis);
    }

    public void writeInt8(byte value, DataOutput dos) throws IOException {
        writeByte(value, dos);
    }

    public int readUint8(DataInput dis) throws IOException {
        return toUnsignedInt(readByte(dis));
    }

    public void writeUint8(int value, DataOutput dos) throws IOException {
        writeByte((byte) value, dos);
    }

    public char readChar(DataInput dis) throws IOException {
        return dis.readChar();
    }

    public void writeChar(char value, DataOutput dos) throws IOException {
        dos.writeChar(value);
    }

    public boolean readBoolean(DataInput dis) throws IOException {
        return dis.readByte() == TRUE;
    }

    public void writeBoolean(boolean value, DataOutput dos) throws IOException {
        dos.writeByte(value ? TRUE : FALSE);
    }

    public short readShort(DataInput dis) throws IOException {
        short bits = dis.readShort();
        return byteOrder == LITTLE_ENDIAN ? Short.reverseBytes(bits) : bits;
    }

    public void writeShort(short value, DataOutput dos) throws IOException {
        short bits = byteOrder == LITTLE_ENDIAN ? Short.reverseBytes(value) : value;
        dos.writeShort(bits);
    }

    public short readInt16(DataInput dis) throws IOException {
        return readShort(dis);
    }

    public void writeInt16(short value, DataOutput dos) throws IOException {
        writeShort(value, dos);
    }

    public int readUint16(DataInput dis) throws IOException {
        return toUnsignedInt(readShort(dis));
    }

    public void writeUint16(int value, DataOutput dos) throws IOException {
        writeShort((short) value, dos);
    }

    public int readInt(DataInput dis) throws IOException {
        int bits = dis.readInt();
        return byteOrder == LITTLE_ENDIAN ? Integer.reverseBytes(bits) : bits;
    }

    public void writeInt(int value, DataOutput dos) throws IOException {
        int bits = byteOrder == LITTLE_ENDIAN ? Integer.reverseBytes(value) : value;
        dos.writeInt(bits);
    }

    public int readInt32(DataInput dis) throws IOException {
        return readInt(dis);
    }

    public void writeInt32(int value, DataOutput dos) throws IOException {
        writeInt(value, dos);
    }

    public long readUint32(DataInput dis) throws IOException {
        return toUnsignedLong(readInt(dis));
    }

    public void writeUint32(long value, DataOutput dos) throws IOException {
        writeInt((int) value, dos);
    }

    public long readLong(DataInput dis) throws IOException {
        long bits = dis.readLong();
        return byteOrder == LITTLE_ENDIAN ? Long.reverseBytes(bits) : bits;
    }

    public void writeLong(long value, DataOutput dos) throws IOException {
        long bits = byteOrder == LITTLE_ENDIAN ? Long.reverseBytes(value) : value;
        dos.writeLong(bits);
    }

    public long readInt64(DataInput dis) throws IOException {
        return readLong(dis);
    }

    public void writeInt64(long value, DataOutput dos) throws IOException {
        writeLong(value, dos);
    }

    public float readFloat(DataInput dis) throws IOException {
        float bits = dis.readFloat();
        return byteOrder == LITTLE_ENDIAN ?
                Float.intBitsToFloat(Integer.reverseBytes(Float.floatToIntBits(bits))) :
                bits;
    }

    public void writeFloat(float value, DataOutput dos) throws IOException {
        float bits = byteOrder == LITTLE_ENDIAN ?
                Float.intBitsToFloat(Integer.reverseBytes(Float.floatToIntBits(value))) :
                value;
        dos.writeFloat(bits);

    }

    public double readDouble(DataInput dis) throws IOException {
        double bits = dis.readDouble();
        return byteOrder == LITTLE_ENDIAN ?
                Double.longBitsToDouble(Long.reverseBytes(Double.doubleToLongBits(bits))) :
                bits;
    }

    public void writeDouble(double value, DataOutput dos) throws IOException {
        double bits = byteOrder == LITTLE_ENDIAN ?
                Double.longBitsToDouble(Long.reverseBytes(Double.doubleToLongBits(value))) :
                value;
        dos.writeDouble(bits);
    }

    public int readBits(BitInputStream bis, int num) throws IOException {
        int value = 0;
        for (int i = 0; i < num; ++i) {
            if (i > 0) {
                value <<= 1;
            }
            if (bis.read() != 0) {
                value |= 0x01;
            }
        }
        return value;
    }

    public void writeBits(int value, int num, BitOutputStream bos) throws IOException {
        for (long mask = 1L << (num - 1); mask > 0; mask >>= 1) {
            bos.write((int) (mask & value));
        }
    }

    private boolean isEmpty(String str) {
        if (str == null) {
            return true;
        } else {
            return str.length() == 0;
        }
    }

    private String getString(byte[] bytes) {
        int i;
        for (i = 0; i < bytes.length; ++i) {
            if (bytes[i] == 0) {
                break;
            }
        }
        return new String(bytes, 0, i);
    }

    public static int toUnsignedInt(byte x) {
        return ((int) x) & 0xff;
    }

    public static int toUnsignedInt(short x) {
        return ((int) x) & 0xffff;
    }

    public static long toUnsignedLong(int x) {
        return ((long) x) & 0xffffffffL;
    }

    public class BitInputStream extends InputStream {
        private InputStream input;
        private int value;
        private int index;

        public BitInputStream(InputStream input) {
            this.input = input;
            this.value = 0;
            this.index = -1;
        }

        @Override
        public int read() throws IOException {
            if (index < 0) {
                if ((value = input.read()) == -1) {
                    throw new IOException("unexpected EOF");
                }
                index = 7;
            }

            return (value & (0x01 << index--)) != 0 ? 1 : 0;
        }

        @Override
        public void close() throws IOException {
            input.close();
        }
    }

    public class BitOutputStream extends OutputStream {
        private int value;
        private int num;
        private OutputStream ostream;

        public BitOutputStream(OutputStream ostream) {
            this.value = 0;
            this.num = 0;
            this.ostream = ostream;
        }

        @Override
        public void write(int b) throws IOException {
            int mask = b == 0 ? 0 : 1;
            value = (value << 1) | mask;
            ++num;
            if (num == 8) {
                ostream.write(value);
                value = 0;
                num = 0;
            }
        }

        public void end() throws IOException {
            if (num > 0) {
                value <<= 8 - num;
                ostream.write(value);
                num = 0;
                value = 0;
            }
        }

        @Override
        public void flush() throws IOException {
            ostream.flush();
        }

        @Override
        public void close() throws IOException {
            end();
            ostream.close();
        }
    }

    void format(TextStructFormat structFormat, int level) {
        structFormat.beginStruct(getClass().getCanonicalName(), level);
        structFormat.endStruct(getClass().getCanonicalName(), level);
    }

    @Override
    public String toString() {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        TextStructFormat structFormat = new TextStructFormat(baos);
        format(structFormat, 0);
        return baos.toString();
    }

    public class TextStructFormat {
        private final static String IDENT = "    ";
        private PrintStream printStream;
        private StringBuilder stringBuilder;

        public TextStructFormat(OutputStream output) {
            this.printStream = new PrintStream(output);
            this.stringBuilder = new StringBuilder();
        }

        private String getValueString(Object obj, String typeName) {
            if (obj == null) {
                return "null";
            }

            switch (typeName) {
                case "char":
                    return toString((char) obj);

                case "byte":
                    return toString((byte) obj);

                case "uint8":
                    return toUint8String((int) obj);

                case "boolean":
                    return toString((boolean) obj);

                case "short":
                case "int16":
                    return toString((short) obj);

                case "uint16":
                    return toUint16String((int) obj);

                case "int":
                case "int32":
                    return toString((int) obj);

                case "uint32":
                    return toUint32String((long) obj);

                case "long":
                    return toString((long) obj);

                case "float":
                    return toString((float) obj);

                case "double":
                    return toString((double) obj);

                default:
                    throw new IllegalArgumentException("unknown type name " + typeName);
            }
        }

        public void beginStruct(String structName, int level) {
            printStream.println(structName + " {");
        }

        public void endStruct(String structName, int level) {
            printStream.print(getIdent(level) + "}");
        }

        public void write(String fieldName, int level, Object obj, String typeName) {
            String value = getValueString(obj, typeName);
            printStream.println(getIdent(level) + fieldName + " = " + value + ";");
        }

        public void writeString(String fieldName, int level, String str, int len) {
            String value;
            if (str == null) {
                value = "null";
            } else if (str.length() > len) {
                value = str.substring(0, len);
            } else {
                value = str;
            }
            printStream.println(getIdent(level) + fieldName + " = " + "\"" + value + "\";");
        }

        public void writeStruct(String fieldName, Struct struct, int level) {
            printStream.print(getIdent(level) + fieldName + " = ");
            if (struct == null) {
                printStream.println("{}");
            } else {
                struct.format(this, level);
                printStream.println();
            }
        }

        public void writeArray(String fieldName, int level, Object array, String typeName) {
            printStream.print(getIdent(level) + fieldName + " = ");
            if (array == null) {
                printStream.println("null");
            } else {
                int len = Array.getLength(array);
                printStream.print(String.format("%d[", len));
                Object value;
                String valueString;
                for (int i = 0; i < len; ++i) {
                    value = Array.get(array, i);
                    valueString = getValueString(value, typeName);
                    if (i > 0) {
                        printStream.print(", ");
                    }
                    printStream.print(valueString);
                }
                printStream.println("];");
            }
        }

        public void writeList(String fieldName, int level, List<? extends Struct> list) {
            printStream.print(getIdent(level) + fieldName + " = ");
            if (list == null) {
                printStream.println("null;");
            } else if (list.size() == 0) {
                printStream.println("0[];");
            } else {
                printStream.println(String.format("%d[", list.size()));
                int count = 0;
                for (Struct struct : list) {
                    if (count > 0) {
                        printStream.println(", ");
                    }
                    printStream.print(getIdent(level + 1));
                    printStream.print(String.format("[%d]:", count));
                    struct.format(this, level + 1);
                    ++ count;
                }
                printStream.println();
                printStream.println(getIdent(level) + "];");
            }
        }

        public void writeStructArray(String fieldName, int level, Object array) {
            printStream.print(getIdent(level) + fieldName + " = ");
            if (array == null) {
                printStream.println("null");
            } else {
                int len = Array.getLength(array);
                if (len == 0) {
                    printStream.println("0[];");
                } else {
                    printStream.println(String.format("%d[", len));
                    Struct struct;
                    for (int i = 0; i < len; ++i) {
                        if (i > 0) {
                            printStream.println(", ");
                        }
                        printStream.print(getIdent(level + 1));
                        struct = (Struct) Array.get(array, i);
                        printStream.print(String.format("[%d]:", i));
                        struct.format(this, level + 1);
                    }
                    printStream.println();
                    printStream.println(getIdent(level) + "];");
                }
            }
        }

        public void writeBits(String fieldName, int value, int level, int bitsNum) {
            printStream.print(getIdent(level) + fieldName + ":" + bitsNum + " = BIN:");
            int mask = 0x01 << (bitsNum - 1);
            for (int i = 0; i < bitsNum; ++i) {
                printStream.print((mask & value) != 0 ? '1' : '0');
                mask >>>= 1;
            }
            printStream.println(";");
        }

        private String getIdent(int level) {
            stringBuilder.setLength(0);
            for (int i = 0; i < level; ++i) {
                stringBuilder.append(IDENT);
            }
            return stringBuilder.toString();
        }

        private String toString(char value) {
            return String.format("%c", value);
        }

        private String toString(byte value) {
            return String.format("%02X", value);
        }

        private String toUint8String(int value) {
            return String.format("(DEC:%d HEX:%02X)", value, value);
        }

        private String toString(boolean value) {
            return value ? "true" : "false";
        }

        private String toString(short value) {
            return String.format("(DEC:%d HEX:%04X)", value, value);
        }

        private String toUint16String(int value) {
            return String.format("(DEC:%d HEX:%04X)", value, value);
        }

        private String toString(int value) {
            return String.format("(DEC:%d HEX:%08X)", value, value);
        }

        private String toUint32String(long value) {
            return String.format("(DEC:%d HEX:%08X)", value, value);
        }

        private String toString(long value) {
            return String.format("(DEC:%d HEX:%016X)", value, value);
        }

        private String toString(float value) {
            return String.format("%f", value);
        }

        private String toString(double value) {
            return String.format("%f", value);
        }
    }
}

#set ($defaultValueMap = {
    "char"      : "'\0'",
	"byte"		: "0",
	"boolean"	: "false",
	"short"		: "0",
	"int"		: "0",
	"long"		: "0L",
	"float"		: "0",
	"double"	: "0.00"
})
## 宏: 生成field的缺省值
#macro (defaultValue $field)
#if ($field.defaultValue)
${field.defaultValue.value}##
#elseif ($field.type.isString())
""##
#elseif ($field.type.isBasic())
${defaultValueMap[${field.type.typeName}]}##
#else
&nbsp;
#end
#end
<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=${charset}" />
<title>Messages Definition</title>
<style type="text/css">
<!--
body {
    margin: auto 100px auto 100px;
    font-family: Menlo, monospace, 'trebuchet MS', 'Lucida sans', Arial;
    font-size: 14px;
    color: #444;
}

hr {
    height:1px;
    border:none;
    border-top:1px solid #cccccc;
}

table {
    *border-collapse: collapse; /* IE7 and lower */
    border-spacing: 0;
    width: 100%;
}

.bordered {
    border: solid #ccc 1px;
    -moz-border-radius: 6px;
    -webkit-border-radius: 6px;
    border-radius: 6px;
    -webkit-box-shadow: 0 1px 1px #ccc;
    -moz-box-shadow: 0 1px 1px #ccc;
    box-shadow: 0 1px 1px #ccc;
}

.bordered tr:hover {
    background: #fbf8e9;
    -o-transition: all 0.1s ease-in-out;
    -webkit-transition: all 0.1s ease-in-out;
    -moz-transition: all 0.1s ease-in-out;
    -ms-transition: all 0.1s ease-in-out;
    transition: all 0.1s ease-in-out;
}

.bordered td, .bordered th {
    border-left: 1px solid #ccc;
    border-top: 1px solid #ccc;
    padding: 10px;
    text-align: left;
}

.bordered th {
    background-color: #dce9f9;
    background-image: -webkit-gradient(linear, left top, left bottom, from(#ebf3fc), to(#dce9f9));
    background-image: -webkit-linear-gradient(top, #ebf3fc, #dce9f9);
    background-image:    -moz-linear-gradient(top, #ebf3fc, #dce9f9);
    background-image:     -ms-linear-gradient(top, #ebf3fc, #dce9f9);
    background-image:      -o-linear-gradient(top, #ebf3fc, #dce9f9);
    background-image:         linear-gradient(top, #ebf3fc, #dce9f9);
    -webkit-box-shadow: 0 1px 0 rgba(255,255,255,.8) inset;
    -moz-box-shadow:0 1px 0 rgba(255,255,255,.8) inset;
    box-shadow: 0 1px 0 rgba(255,255,255,.8) inset;
    border-top: none;
    text-shadow: 0 1px 0 rgba(255,255,255,.5);
}

.bordered td:first-child, .bordered th:first-child {
    border-left: none;
}

.bordered th:first-child {
    -moz-border-radius: 6px 0 0 0;
    -webkit-border-radius: 6px 0 0 0;
    border-radius: 6px 0 0 0;
}

.bordered th:last-child {
    -moz-border-radius: 0 6px 0 0;
    -webkit-border-radius: 0 6px 0 0;
    border-radius: 0 6px 0 0;
}

.bordered th:only-child{
    -moz-border-radius: 6px 6px 0 0;
    -webkit-border-radius: 6px 6px 0 0;
    border-radius: 6px 6px 0 0;
}

.bordered tr:last-child td:first-child {
    -moz-border-radius: 0 0 0 6px;
    -webkit-border-radius: 0 0 0 6px;
    border-radius: 0 0 0 6px;
}

.bordered tr:last-child td:last-child {
    -moz-border-radius: 0 0 6px 0;
    -webkit-border-radius: 0 0 6px 0;
    border-radius: 0 0 6px 0;
}

-->
</style>
</head>

<body>
#foreach ($struct in $allStructs)
<hr />
<A name="${struct.typeName}"><!-- --></A>
<h1>
	${struct.typeName}
</h1>
<p>(${struct.definedLocation})</p>
	#if ($struct.haveComments())
${struct.htmlComments}
	#end

#macro (typeHref $field)
#if (!$field.type.isBasic() && !$field.type.isString())
<a href="Struct.html#${field.type.typeName}">${field.type.typeName}</a>##
#if ($field.type.hasArray())
[${field.type.arraySize}]##
#end
#else
${field.type.prototype}##
#end
#end

<table class="bordered">
  <thead>
    <tr>
      <th scope="col">Data Type</th>
      <th scope="col">Field Name</th>
      <th scope="col">Default</th>
      <th width="50%" scope="col">Description</th>
    </tr>
  </thead>
  #foreach ($field in $struct.fields)
  <tr valign="top">
	<td><p>#typeHref($field)</p></td>
	<td><p>${field.name}</p></td>
	<td><p>#defaultValue($field)</p></td>
	<td>${field.htmlComments}</td>
  </tr>
#end
</table>
<p>&nbsp;</p>
#end
</body>
</html>

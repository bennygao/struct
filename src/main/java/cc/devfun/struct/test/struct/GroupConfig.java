/******************************************************************************
 * GroupConfig.java
 * GENERATED BY StructCompiler, DON'T MODIFY MANULLY.
 * Generated Time: Sat Apr 16 13:27:38 CST 2016
 */
package cc.devfun.struct.test.struct;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

/**
 * struct GroupConfig
 */
public class GroupConfig extends Struct {
    private byte[] groupId;

    private byte groupChannel;

    private byte[] reserved;

    private short num;

    private java.util.List<EslConfig> eslConfig;

    public GroupConfig() {
        this.groupId = new byte[4];
        java.util.Arrays.fill(this.groupId, (byte) 0);

        this.groupChannel = (byte) 0;

        this.reserved = new byte[4];
        java.util.Arrays.fill(this.reserved, (byte) 0);

        this.num = (short) 0;

        this.eslConfig = new java.util.ArrayList<EslConfig>();

    }
    public byte[] getGroupId() {
        return this.groupId;
    }

    public byte getGroupChannel() {
        return this.groupChannel;
    }

    public void setGroupChannel(byte groupChannel) {
        this.groupChannel = groupChannel;
    }

    public byte[] getReserved() {
        return this.reserved;
    }

    public short getNum() {
        return this.num;
    }

    public void setNum(short num) {
        this.num = num;
    }

    public java.util.List<EslConfig> getEslConfig() {
        return this.eslConfig;
    }


    public int calcSize() {
        int __size = 0;

        __size += 1 * 4;

        __size += 1 * 1;

        __size += 1 * 4;

        __size += 2 * 1;

        this.num = (short) this.eslConfig.size();
        for (int i = 0; i < this.num; ++i) {
            __size += this.eslConfig.get(i).calcSize();
        }

        return __size;
    }

    public void encode(DataOutput dos) throws IOException {
        for (int i = 0; i < 4; ++i) {
            write(dos, this.groupId[i], byte.class);
        }

        write(dos, this.groupChannel, byte.class);

        for (int i = 0; i < 4; ++i) {
            write(dos, this.reserved[i], byte.class);
        }

        write(dos, this.num, short.class);

        this.num = (short) this.eslConfig.size();
        for (int i = 0; i < this.num; ++i) {
            this.eslConfig.get(i).encode(dos);
        }

    }

    public Struct decode(DataInput dis) throws IOException {
        for (int i = 0; i < 4; ++i) {
            this.groupId[i] = read(dis, byte.class);
        }

        this.groupChannel = read(dis, byte.class);

        for (int i = 0; i < 4; ++i) {
            this.reserved[i] = read(dis, byte.class);
        }

        this.num = read(dis, short.class);

        for (int i = 0; i < this.num; ++i) {
            this.eslConfig.add((EslConfig) new EslConfig().decode(dis));
        }

        return this;
    }
}

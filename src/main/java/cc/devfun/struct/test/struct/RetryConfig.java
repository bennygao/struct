/******************************************************************************
 * RetryConfig.java
 * GENERATED BY StructCompiler, DON'T MODIFY MANULLY.
 * Generated Time: Sat Apr 16 13:27:38 CST 2016
 */
package cc.devfun.struct.test.struct;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

/**
 * struct RetryConfig
 *
 * 基站重传（4秒外重传）配置
 */
public class RetryConfig extends Struct {
    private short command;

    private int length;

    // 基站重传次数
    private byte retryTimes;

    // 重传模式。
    // 0:表示如果一个价签的多个数据包中，只要有一个包传输失败，就重传这个价签的所有数据包；
    // 1:表示只重传失败的数据包。
    // 当前LCD价签只支持模式0，固定填0。
    private byte retryMode;

    // 预留
    private byte[] reserved;

    // Group配置个数
    private byte num;

    // Group配置
    private GroupConfig groupConfig;

    public RetryConfig() {
        this.command = (short) 0xFF00;

        this.length = 0;

        this.retryTimes = (byte) 0;

        this.retryMode = (byte) 0;

        this.reserved = new byte[12];
        java.util.Arrays.fill(this.reserved, (byte) 0);

        this.num = (byte) 0;

        groupConfig = new GroupConfig();

    }
    public short getCommand() {
        return this.command;
    }

    public void setCommand(short command) {
        this.command = command;
    }

    public int getLength() {
        return this.length;
    }

    public void setLength(int length) {
        this.length = length;
    }

    public byte getRetryTimes() {
        return this.retryTimes;
    }

    public void setRetryTimes(byte retryTimes) {
        this.retryTimes = retryTimes;
    }

    public byte getRetryMode() {
        return this.retryMode;
    }

    public void setRetryMode(byte retryMode) {
        this.retryMode = retryMode;
    }

    public byte[] getReserved() {
        return this.reserved;
    }

    public byte getNum() {
        return this.num;
    }

    public void setNum(byte num) {
        this.num = num;
    }

    public GroupConfig getGroupConfig() {
        return this.groupConfig;
    }


    public int calcSize() {
        int __size = 0;

        __size += 2 * 1;

        __size += 4 * 1;

        __size += 1 * 1;

        __size += 1 * 1;

        __size += 1 * 12;

        __size += 1 * 1;

        __size += this.groupConfig.calcSize();

        return __size;
    }

    public void encode(DataOutput dos) throws IOException {
        write(dos, this.command, short.class);

        write(dos, this.length, int.class);

        write(dos, this.retryTimes, byte.class);

        write(dos, this.retryMode, byte.class);

        for (int i = 0; i < 12; ++i) {
            write(dos, this.reserved[i], byte.class);
        }

        write(dos, this.num, byte.class);

        this.groupConfig.encode(dos);

    }

    public Struct decode(DataInput dis) throws IOException {
        this.command = read(dis, short.class);

        this.length = read(dis, int.class);

        this.retryTimes = read(dis, byte.class);

        this.retryMode = read(dis, byte.class);

        for (int i = 0; i < 12; ++i) {
            this.reserved[i] = read(dis, byte.class);
        }

        this.num = read(dis, byte.class);

        this.groupConfig.decode(dis);

        return this;
    }
}

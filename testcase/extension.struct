#
# 演示位段和内嵌定义struct
#

// 颜色
// 位0-3 颜色透明度
// 位4-7 颜色值
bitfield Color {
    transparency:4; // 透明度, 0为不透明, 15为全透明。
    color:4; // 颜色值
}

// 图层
struct ImageLayer {
    // 坐标
    struct Point {
        int x; // x轴坐标
        int y; // y轴坐标
    } leftTop; // 左上角坐标

    // 尺寸
    struct Size {
        int width; // 宽度
        int height; // 高度
    } size; // 图层大小

    // 图层颜色
    Color color;
}

// 任务
struct Task {
    // 任务控制字
    bitfield CtrlAndSID {
        ctrl:3; // 任务类型标识
        SID:4; // Session ID
        reserved:17; // 保留
    } ctrlAndSID; // 任务控制字和SessionID

    // 混杂模式
    struct MixedGroup {
        uint16 power; // 发射功率
        uint8 channel; // 通讯信道;
        uint16 num; // 后续数据包(Packet)个数
        // 数据包
        struct Packet {
            byte[4] eslId; // ESL ID
            byte[26] data; // 数据
        } [num] packets; // 由num指定个数的多个数据包
    } mixedGroup;

    // CCITT-CRC16
    uint16 crc16;
}

bitfield Property {
	// [0:3]显示颜色顺序
	// 0：表示黑色，第一帧就刷给屏幕
	// 1：表示第二颜色，需要单独发送给屏幕
	// 2~15：以此类推
	colorOrder: 4;

	// [4:5]图层类别
	// 0：标准bitmap
	// 1：字体bitmap
	// 2：OSD属性bitmap
	// 3：采用扩展格式，P属性再增加3个字节
	layerType: 2;

	// [6:7] 屏幕方向，只对数字字体有意义
    // 0,1,2,3分别表示0度，90度，180度，270度
	direction: 2;
}

bitfield ExtendProperty{
	layerType: 3;
	decimalCount: 4;
	reserved: 17;
}